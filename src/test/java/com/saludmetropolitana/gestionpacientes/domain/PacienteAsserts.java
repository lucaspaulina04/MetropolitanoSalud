package com.saludmetropolitana.gestionpacientes.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PacienteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllPropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteAutoGeneratedPropertiesEquals(expected, actual);
        assertPacienteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllUpdatablePropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteUpdatableFieldsEquals(expected, actual);
        assertPacienteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAutoGeneratedPropertiesEquals(Paciente expected, Paciente actual) {
        assertThat(expected)
            .as("Verify Paciente auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableFieldsEquals(Paciente expected, Paciente actual) {
        assertThat(expected)
            .as("Verify Paciente relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getApellido()).as("check apellido").isEqualTo(actual.getApellido()))
            .satisfies(e -> assertThat(e.getFechanacimiento()).as("check fechanacimiento").isEqualTo(actual.getFechanacimiento()))
            .satisfies(e -> assertThat(e.getEdad()).as("check edad").isEqualTo(actual.getEdad()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNumero()).as("check numero").isEqualTo(actual.getNumero()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableRelationshipsEquals(Paciente expected, Paciente actual) {
        // empty method
    }
}
